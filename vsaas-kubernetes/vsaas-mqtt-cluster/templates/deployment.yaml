apiVersion: apps/v1
kind: StatefulSet  # Changed from Deployment to StatefulSet for clustering
metadata:
  name: {{ .Release.Name }}-mqtt
  labels:
    {{- include "vsaas-mqtt.labels" . | nindent 4 }}
spec:
  serviceName: {{ .Release.Name }}-mqtt
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-mqtt
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-mqtt
    spec:
      serviceAccountName: {{ .Release.Name }}-mqtt
      terminationGracePeriodSeconds: 10
      containers:
      - name: {{ .Release.Name }}-mqtt-app
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - name: http
          containerPort: 15672
        - name: amqp
          containerPort: 5672
        - name: mqtt
          containerPort: 1883
        - name: web-mqtt
          containerPort: 15675
        - name: clustering
          containerPort: 4369
        env:
        - name: RABBITMQ_DEFAULT_USER
          value: {{ .Values.rabbitmq.username | quote }}
        - name: RABBITMQ_DEFAULT_PASS
          value: {{ .Values.rabbitmq.password | quote }}
        - name: RABBITMQ_ERLANG_COOKIE
          value: {{ .Values.rabbitmq.erlangCookie | quote }}
        - name: RABBITMQ_NODENAME
          value: rabbit@$(POD_NAME).{{ .Release.Name }}-mqtt.{{ .Release.Namespace }}.svc.cluster.local
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: RABBITMQ_USE_LONGNAME
          value: "true"
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        volumeMounts:
        - name: config
          mountPath: /etc/rabbitmq/rabbitmq.conf
          subPath: rabbitmq.conf
        - name: plugins
          mountPath: /etc/rabbitmq/enabled_plugins
          subPath: enabled_plugins
        - name: data
          mountPath: /var/lib/rabbitmq
        {{- if .Values.probes.readiness.enabled }}
        readinessProbe:
          exec:
            command:
            - rabbitmq-diagnostics
            - check_running
          initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
          timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
          successThreshold: {{ .Values.probes.readiness.successThreshold }}
        {{- end }}
        {{- if .Values.probes.liveness.enabled }}
        livenessProbe:
          exec:
            command:
            - rabbitmq-diagnostics
            - check_running
          initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
          failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
          successThreshold: {{ .Values.probes.liveness.successThreshold }}
        {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ .Release.Name }}-mqtt-config
          items:
          - key: rabbitmq.conf
            path: rabbitmq.conf
      - name: plugins
        configMap:
          name: {{ .Release.Name }}-mqtt-config
          items:
          - key: enabled_plugins
            path: enabled_plugins
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.persistence.storageClass | quote }}
      resources:
        requests:
          storage: {{ .Values.persistence.size }}